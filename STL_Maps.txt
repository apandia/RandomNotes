Unordered Map:
==============
Unordered maps are associative containers that store elements formed by the combination of a key value and a mapped value, and which allows for fast retrieval of individual elements based on their keys.
 
Map:
====
Strored key value pairs in sorted manner. 

Note: In map/unordered_map Keys are unique i.e. duplicate keys are not stored.

Map and Unordered Map example:
================================
say input vector --> vector<int> input{3,4,4,4,4,4,4,1,2,5};

	map<int, int> m;
	unordered_map<int, int> um;

	for (auto value : arr) {
		m[value]++;
		um[value]++;
	}

Map Output=
1 1
2 1
3 1
4 6
5 1

Unordered Map Output=
3 1
4 6
1 1
2 1
5 1

Insert to map/unordered_map:
===========================
unordered_map<string, int> map;
 
// inserting values by using [] operator
map["Hello"] = 10;
map["Hi"] = 20;
map["World"] = 30;

//use insert function
map.insert({"Loren",40});
map.insert({"Ipsum",50});
 
// Traversing an unordered map
for (auto x : map)
  cout << x.first << " " << x.second << endl;

Important notes:
=================
Since unordered_map is based on Hashing of keys below will not work:
unordered_map<pair<int,int>, string> um;

as there is no hashing implementation for pair possible. 

Time complexity - Map
=====================
map<int, string> m;

1.insert:
	m[1] = "Hello";			--> TC = O(log(n)) n is current size of map

2. access:
	map element access O(log(n)) for each element. so accessing all element complexity will be --> TC = O(n log(n))
	for(auto elem : m)		--> TC = O(n log(n))
	
3. find
auto it = m.find(1)		--> TC = O(log(n))

4. erase
m.erase(1)/m.erase(it)	--> TC = O(log(n))

for map with string as key:
map<string, string> m; --> TC = s.size() * O(log(n))

Time Complexity - Unorder Map:
==============================
unordered_map<int, string> um;

1. insert 			--> TC = O(1)
2. access 			--> TC = O(1)
3. find 			--> TC = O(1)
4. erase 			--> TC = O(1)
